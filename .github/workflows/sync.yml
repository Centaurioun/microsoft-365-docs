name: 'Upstream Sync'

on:
  schedule:
    - cron: '0 0 * * *'  # Runs every day at 00:00 UTC
  workflow_dispatch:  # Allows manual triggering

jobs:
  sync_with_upstream:
    runs-on: ubuntu-latest
    # Grant permissions for the job to write to your repository.
    permissions:
      contents: write
    
    # Run this job only if the repository is a fork.
    if: ${{ github.event.repository.fork }}

    steps:
      # Step 1: Checkout your fork's main branch
      - name: Checkout target repo
        uses: actions/checkout@v4
        with:
          ref: main
          # We must fetch all history and tags for the merge to work correctly
          fetch-depth: 0

      # Step 2: Configure Git with a bot name and email
      - name: Set Git config
        run: |
          git config user.name 'GitHub Actions Bot'
          git config user.email 'actions@github.com'

      # Step 3: Add the original Microsoft repo as the "upstream" remote
      - name: Add upstream remote
        run: git remote add upstream https://github.com/MicrosoftDocs/microsoft-365-docs.git

      # Step 4: Fetch all branches and history from the upstream repo
      - name: Fetch from upstream
        run: git fetch upstream

      # Step 5: Merge the upstream's 'public' branch into your 'main' branch
      # The -X theirs strategy automatically resolves any conflicts by accepting
      # the incoming changes from the upstream branch, which is what we want.
      - name: Merge upstream/public into main
        run: git merge -X theirs upstream/public --allow-unrelated-histories

      # Step 6: Push the new merge commit to your fork
      - name: Push changes to main
        run: git push origin main
